From ad20a75844e5a2bffba5c3f0ccecaa3c52d5a2e9 Mon Sep 17 00:00:00 2001
From: Zhou Yaoyang <diamondzyy@sina.com>
Date: Wed, 3 Jan 2018 15:36:19 +0800
Subject: [PATCH 001/518] Fix early-quit in commit stage

When one thread is unable to commit more instructions,
other threads should continue committing.
In original implementation, if one thread cannot commit,
all threads cannot commit any more.

Change-Id: I610bb4985cbacd342fbf0fbc11899a7710db1db8
---
 src/cpu/o3/commit.hh      |  4 ++++
 src/cpu/o3/commit_impl.hh | 18 ++++++++++++------
 2 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/src/cpu/o3/commit.hh b/src/cpu/o3/commit.hh
index f508a372e..17ff71429 100644
--- a/src/cpu/o3/commit.hh
+++ b/src/cpu/o3/commit.hh
@@ -44,6 +44,7 @@
 #ifndef __CPU_O3_COMMIT_HH__
 #define __CPU_O3_COMMIT_HH__
 
+#include <array>
 #include <queue>
 
 #include "base/statistics.hh"
@@ -518,6 +519,9 @@ class DefaultCommit
 
     /** Number of cycles where the commit bandwidth limit is reached. */
     Stats::Scalar commitEligibleSamples;
+
+private:
+    std::array<bool, Impl::MaxThreads> skipThisCycle{};
 };
 
 #endif // __CPU_O3_COMMIT_HH__
diff --git a/src/cpu/o3/commit_impl.hh b/src/cpu/o3/commit_impl.hh
index b3a97ad3a..bcca9f6b9 100644
--- a/src/cpu/o3/commit_impl.hh
+++ b/src/cpu/o3/commit_impl.hh
@@ -49,14 +49,15 @@
 #include <string>
 
 #include "arch/utility.hh"
-#include "base/loader/symtab.hh"
 #include "base/cp_annotate.hh"
+#include "base/loader/symtab.hh"
+#include "commit.hh"
 #include "config/the_isa.hh"
+#include "cpu/base.hh"
 #include "cpu/checker/cpu.hh"
+#include "cpu/exetrace.hh"
 #include "cpu/o3/commit.hh"
 #include "cpu/o3/thread_state.hh"
-#include "cpu/base.hh"
-#include "cpu/exetrace.hh"
 #include "cpu/timebuf.hh"
 #include "debug/Activity.hh"
 #include "debug/Commit.hh"
@@ -656,6 +657,8 @@ DefaultCommit<Impl>::tick()
     if (activeThreads->empty())
         return;
 
+    std::fill(skipThisCycle.begin(), skipThisCycle.end(), false);
+
     list<ThreadID>::iterator threads = activeThreads->begin();
     list<ThreadID>::iterator end = activeThreads->end();
 
@@ -1103,7 +1106,8 @@ DefaultCommit<Impl>::commitInsts()
                     if (count > 1) {
                         DPRINTF(Commit,
                                 "PC skip function event, stopping commit\n");
-                        break;
+                        skipThisCycle[tid] = true;
+                        continue;
                     }
                 }
 
@@ -1121,7 +1125,9 @@ DefaultCommit<Impl>::commitInsts()
                 DPRINTF(Commit, "Unable to commit head instruction PC:%s "
                         "[tid:%i] [sn:%i].\n",
                         head_inst->pcState(), tid ,head_inst->seqNum);
-                break;
+
+                skipThisCycle[tid] = true;
+                continue;
             }
         }
     }
@@ -1502,7 +1508,7 @@ DefaultCommit<Impl>::oldestReady()
              commitStatus[tid] == Idle ||
              commitStatus[tid] == FetchTrapPending)) {
 
-            if (rob->isHeadReady(tid)) {
+            if (rob->isHeadReady(tid) && !skipThisCycle[tid]) {
 
                 DynInstPtr head_inst = rob->readHeadInst(tid);
 
-- 
2.29.2

