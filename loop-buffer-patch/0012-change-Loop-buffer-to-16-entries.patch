From 3ca05a8fba855f751994ce9a2b756a2cca5abb6b Mon Sep 17 00:00:00 2001
From: Zhou Yaoyang <shinezyy@qq.com>
Date: Thu, 16 Jul 2020 11:53:21 +0800
Subject: [PATCH 12/13] change Loop buffer to 16 entries

Change-Id: Iec73fd5b59e8fda118b9d26551c2a4977f245648
---
 src/cpu/o3/LoopBuffer.py  |  2 +-
 src/cpu/o3/fetch_impl.hh  |  8 +++++---
 src/cpu/o3/loop_buffer.cc | 24 +++++++++++++++---------
 src/cpu/o3/loop_buffer.hh |  2 +-
 4 files changed, 22 insertions(+), 14 deletions(-)

diff --git a/src/cpu/o3/LoopBuffer.py b/src/cpu/o3/LoopBuffer.py
index 434ae2ad2..f444999b0 100644
--- a/src/cpu/o3/LoopBuffer.py
+++ b/src/cpu/o3/LoopBuffer.py
@@ -6,7 +6,7 @@ class LoopBuffer(SimObject):
     cxx_class = 'LoopBuffer'
     cxx_header = 'cpu/o3/loop_buffer.hh'
 
-    numEntries = Param.Unsigned(64, "Number of entries")
+    numEntries = Param.Unsigned(16, "Number of entries")
     entrySize = Param.Unsigned(512, "Size of entries in bytes")
     enable = Param.Bool(False, "Enable")
     loopFiltering = Param.Bool(True, "Enable")
diff --git a/src/cpu/o3/fetch_impl.hh b/src/cpu/o3/fetch_impl.hh
index 5579719f2..f1528f4d7 100644
--- a/src/cpu/o3/fetch_impl.hh
+++ b/src/cpu/o3/fetch_impl.hh
@@ -574,7 +574,9 @@ DefaultFetch<Impl>::lookupAndUpdateNextPC(
     predict_taken = branchPred->predict(inst->staticInst, inst->seqNum,
                                         nextPC, tid);
 
-    lbuf->probe(branch_pc, nextPC.pc(), predict_taken);
+    if (lbuf->enable) {
+        lbuf->probe(branch_pc, nextPC.pc(), predict_taken);
+    }
 
     if (predict_taken) {
         DPRINTF(Fetch, "[tid:%i]: [sn:%i]: Branch predicted to be taken to %s.\n",
@@ -1421,7 +1423,7 @@ DefaultFetch<Impl>::fetch(bool &status_change)
             thisPC = nextPC;
             inRom = isRomMicroPC(thisPC.microPC());
 
-            if (newMacro && fetchSource == CacheLine) {
+            if (newMacro) {
                 fetchAddr = thisPC.instAddr() & BaseCPU::PCMask;
                 blkOffset = (fetchAddr - fetchBufferPC[tid]) / instSize;
                 pcOffset = 0;
@@ -1457,7 +1459,7 @@ DefaultFetch<Impl>::fetch(bool &status_change)
                 }
             }
         } else { // from cache line
-            if (predictedBranch && lbuf->canProvide(npc)) {
+            if (lbuf->enable && predictedBranch && lbuf->canProvide(npc)) {
                 DPRINTF(LoopBuffer, "Will switch to fetch from lbuf\n");
                 fetchSource = LoopBuf;
             }
diff --git a/src/cpu/o3/loop_buffer.cc b/src/cpu/o3/loop_buffer.cc
index 4a17fa97e..dfc13d2ce 100644
--- a/src/cpu/o3/loop_buffer.cc
+++ b/src/cpu/o3/loop_buffer.cc
@@ -160,6 +160,8 @@ LoopBuffer::switchTo(Addr target_pc)
     if (fb_state->valid) {
         instSupply.expectedForwardBranch.set(
                 fb_state->forwardBranches[instSupply.forwardBranchIndex]);
+    } else {
+        instSupply.expectedForwardBranch.invalidate();
     }
 }
 
@@ -303,8 +305,8 @@ LoopBuffer::probe(Addr branch_pc, Addr target_pc, bool pred_taken)
                             );
                 }
 
-            } else {
-                DPRINTF(LoopBuffer, "Abort 0x%x|__>0x%x due to another branch:"
+            } else if (pred_taken) {
+                DPRINTF(LoopBuffer, "Abort 0x%x|__>0x%x due to another taken branch:"
                         "0x%x|__>0x%x\n",
                         txn.branchPC, txn.targetPC,
                         branch_pc, target_pc);
@@ -344,8 +346,9 @@ LoopBuffer::recordInst(uint8_t *building_inst, Addr pc, unsigned inst_size)
 
     if (pc == txn.branchPC) {
         DPRINTF(LoopBuffer,
-                "0x%x|__>0x%x: completely filled!\n",
-                txn.branchPC, txn.targetPC);
+                "0x%x|__>0x%x: completely filled! with %u fjumps\n",
+                txn.branchPC, txn.targetPC,
+                txn.forwardBranchState->forwardBranches.size());
         txn.state = Recorded;
         setFetched(txn.targetPC);
         clearPending();
@@ -415,6 +418,7 @@ uint8_t*
 LoopBuffer::getInst(Addr pc, unsigned inst_size)
 {
     assert(pc == instSupply.expectedPC);
+    assert(pc >= instSupply.start && pc <= instSupply.end);
     auto ret = instSupply.buf + instSupply.offset;
 
     DPRINTF(LoopBuffer, "Supplying with loop 0x%x|_>0x%x offset: %u\n",
@@ -436,7 +440,7 @@ LoopBuffer::getInst(Addr pc, unsigned inst_size)
             instSupply.expectedForwardBranch.set(
                     fb_state->forwardBranches[instSupply.forwardBranchIndex]);
         } else {
-            instSupply.expectedForwardBranch.invalidate();
+            // instSupply.expectedForwardBranch.invalidate();
         }
 
     } else {
@@ -453,7 +457,7 @@ LoopBuffer::canContinueOnNPC(Addr cpc, Addr npc, bool is_taken)
     if (is_taken) {
         if (!instSupply.valid) {
             cont = false;
-        } else if (cpc == instSupply.end) {
+        } else if (cpc == instSupply.end && npc == instSupply.start) {
             // normal loop back
             cont = true;
         } else if (isBackward(cpc, npc)) {
@@ -467,13 +471,15 @@ LoopBuffer::canContinueOnNPC(Addr cpc, Addr npc, bool is_taken)
                 cont = true;
             } else {
                 DPRINTF(LoopBuffer, "Forward branch(T): 0x%x|_>0x%x mismatched"
-                        ", expected(T): 0x%x|_>0x%x\n",
-                        cpc, npc, efb.pair.branch, efb.pair.target);
+                        ", expected(T): (%i) 0x%x|_>0x%x\n",
+                        cpc, npc,
+                        efb.valid,
+                        efb.pair.branch, efb.pair.target);
                 cont = false;
             }
 
         } else {
-            panic("Unexpected path\n");
+            warn("Unexpected path\n");
             cont = false;
         }
     } else {
diff --git a/src/cpu/o3/loop_buffer.hh b/src/cpu/o3/loop_buffer.hh
index 265898634..4844cc16c 100644
--- a/src/cpu/o3/loop_buffer.hh
+++ b/src/cpu/o3/loop_buffer.hh
@@ -150,7 +150,7 @@ class LoopBuffer : public SimObject
 
     const Addr mask;
 
-    const unsigned evictRange{10};
+    const unsigned evictRange{6};
 
     const bool enable;
 
-- 
2.29.2

