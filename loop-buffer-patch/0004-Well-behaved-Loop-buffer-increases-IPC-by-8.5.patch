From ccf928fff1a3a22d6709820753f01c0532420591 Mon Sep 17 00:00:00 2001
From: Zhou Yaoyang <shinezyy@qq.com>
Date: Fri, 26 Jun 2020 21:56:10 +0800
Subject: [PATCH 04/13] Well-behaved Loop buffer increases IPC by 8.5%

Change-Id: Ifda04619f0318a05ad55937ea707a6f5adf62087
---
 configs/common/SSConfig.py              |  4 ++
 configs/common/SSOptions.py             |  4 ++
 src/cpu/o3/LoopBuffer.py                |  2 +-
 src/cpu/o3/fetch_impl.hh                | 10 +--
 src/cpu/o3/loop_buffer.cc               |  8 +++
 src/cpu/o3/loop_buffer.hh               |  3 +
 util/run_sh_scrpits/labs/loop_buffer.py | 92 +++++++++++++++++++++++++
 7 files changed, 118 insertions(+), 5 deletions(-)
 create mode 100755 util/run_sh_scrpits/labs/loop_buffer.py

diff --git a/configs/common/SSConfig.py b/configs/common/SSConfig.py
index c27cf1f75..f81297725 100644
--- a/configs/common/SSConfig.py
+++ b/configs/common/SSConfig.py
@@ -39,6 +39,10 @@ def modifyO3CPUConfig(options, cpu):
         print('Unknow BP:', options.use_bp)
         assert False
 
+    if options.enable_loop_buffer:
+        cpu.loopBuffer.enable = True
+    else:
+        cpu.loopBuffer.enable = False
 
     if options.bp_size:
         cpu.branchPred.globalPredictorSize = options.bp_size
diff --git a/configs/common/SSOptions.py b/configs/common/SSOptions.py
index 95ffb77c5..1b945d10b 100644
--- a/configs/common/SSOptions.py
+++ b/configs/common/SSOptions.py
@@ -159,3 +159,7 @@ def addO3Options(parser):
             type='int',
             help='the core width of O3 cpu')
 
+    parser.add_option("--enable-loop-buffer",
+            action='store_true',
+            help='enable loop buffer')
+
diff --git a/src/cpu/o3/LoopBuffer.py b/src/cpu/o3/LoopBuffer.py
index be22e9d92..de838bfd9 100644
--- a/src/cpu/o3/LoopBuffer.py
+++ b/src/cpu/o3/LoopBuffer.py
@@ -8,4 +8,4 @@ class LoopBuffer(SimObject):
 
     numEntries = Param.Unsigned(64, "Number of entries")
     entrySize = Param.Unsigned(64, "Size of entries in bytes")
-    enable = Param.Bool(True, "Enable")
+    enable = Param.Bool(False, "Enable")
diff --git a/src/cpu/o3/fetch_impl.hh b/src/cpu/o3/fetch_impl.hh
index 88c331c62..44de76f2c 100644
--- a/src/cpu/o3/fetch_impl.hh
+++ b/src/cpu/o3/fetch_impl.hh
@@ -1288,7 +1288,7 @@ DefaultFetch<Impl>::fetch(bool &status_change)
         if (needMem) {
             // If buffer is no longer valid or fetchAddr has moved to point
             // to the next cache block then start fetch from icache.
-            if (foundLine) {
+            if (lbuf->enable && foundLine) {
 
                 Addr new_lbuf_start_pc = foundLine ? lbuf->align(fetchAddr) : 0;
 
@@ -1376,6 +1376,7 @@ DefaultFetch<Impl>::fetch(bool &status_change)
             }
 #endif
 
+            Addr cpc = thisPC.instAddr();
             nextPC = thisPC;
 
             // If we're branching after this instruction, quit fetching
@@ -1389,6 +1390,7 @@ DefaultFetch<Impl>::fetch(bool &status_change)
                 lookupAndUpdateNextPC(instruction, nextPC);
             predictedBranch |= this_is_branch;
 
+            Addr npc = nextPC.instAddr();
 
             if (this_is_branch) {
                 // predicted backward branch
@@ -1396,9 +1398,9 @@ DefaultFetch<Impl>::fetch(bool &status_change)
                         cpc, npc);
             }
 
-            Addr npc = nextPC.instAddr();
-            if (lbuf->enable && predictedBranch && thisPC.instAddr() > npc) {
-                DPRINTF(Fetch, "Backward branch detected with PC = %s\n", thisPC);
+            if (lbuf->enable && this_is_branch && thisPC.instAddr() > npc) {
+                DPRINTF(Fetch, "Branch detected with PC : 0x%x => 0x%x\n",
+                        cpc, npc);
 
                 foundLine = lbuf->getBufferedLine(npc);
 
diff --git a/src/cpu/o3/loop_buffer.cc b/src/cpu/o3/loop_buffer.cc
index 6c833736a..68cfed85e 100644
--- a/src/cpu/o3/loop_buffer.cc
+++ b/src/cpu/o3/loop_buffer.cc
@@ -66,6 +66,7 @@ LoopBuffer::updateControl(Addr target)
 {
     assert(table.count(target));
     auto used = ++table[target].used;
+    totalUsed++;
 
     OrderIt insert_pos = rank.begin(), e = rank.end();
     for (; insert_pos != e; insert_pos++) {
@@ -89,6 +90,13 @@ LoopBuffer::updateControl(Addr target)
         // rank.erase(ele_pos);
     }
 
+    if (totalUsed > 100) {
+        for (auto &pair: table) {
+            pair.second.used *= 0.9;
+        }
+        totalUsed = 0;
+    }
+
     assert(rank.size() == table.size());
 }
 
diff --git a/src/cpu/o3/loop_buffer.hh b/src/cpu/o3/loop_buffer.hh
index a301c46a2..fc6cda27d 100644
--- a/src/cpu/o3/loop_buffer.hh
+++ b/src/cpu/o3/loop_buffer.hh
@@ -45,6 +45,9 @@ class LoopBuffer : public SimObject
     bool pending{};
 
     Addr pendingTarget{};
+
+    uint64_t totalUsed{};
+
   public:
 
     LoopBuffer(LoopBufferParams *params);
diff --git a/util/run_sh_scrpits/labs/loop_buffer.py b/util/run_sh_scrpits/labs/loop_buffer.py
new file mode 100755
index 000000000..292793fba
--- /dev/null
+++ b/util/run_sh_scrpits/labs/loop_buffer.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python3
+
+import sys
+sys.path.append('../')
+
+from os.path import join as pjoin
+from multiprocessing import Pool
+import common as c
+import local_config as lc
+
+num_thread = lc.cores_per_task
+window_size = 192 * 2
+
+buffer_on = False
+obp = True
+full = True
+
+if full:
+    d = '_full'
+else:
+    d = ''
+
+if obp:
+        obp_suffix = '_obp'
+else:
+        obp_suffix = ''
+
+if buffer_on:
+    buffer_suffix = '_on'
+else:
+    buffer_suffix = '_off'
+
+# config = f'ideal_8w{obp_suffix}'
+config = f'loop_buffer{buffer_suffix}{obp_suffix}'
+outdir = f'{c.stats_base_dir}/{config}{d}/'
+
+def main():
+    g5_configs = []
+
+    dict_options = {
+            '--num-IQ': window_size,
+            '--o3-core-width': 8,
+
+            '--use-bp': 'OracleBP',
+            '--branch-trace-file': 'useless_branch.protobuf.gz',
+            }
+
+    binary_options= [
+            '--check-outcome-addr',
+            '--branch-trace-en',
+            ]
+    if buffer_on:
+        binary_options.append(
+                '--enable-loop-buffer',
+                )
+
+    #with open('./tmp.txt') as f:
+    with open('../all_function_spec2017.txt') as f:
+        for line in f:
+            if not line.startswith('#'):
+                for cpt_id in range(0, 3):
+                    benchmark = line.strip()
+                    task = benchmark + '_' + str(cpt_id)
+                    g5_config = c.G5Config(
+                        benchmark=benchmark,
+                                                window_size=window_size,
+                        bmk_outdir=pjoin(outdir, task),
+                        cpt_id=cpt_id,
+                        arch='RISCV',
+                        full=full,
+                        full_max_insts=220 * 10**6,
+                        debug=False,
+                        debug_flags=[
+                            'LoopBufferStack',
+                            'Fetch',
+                            ],
+                        func_id=config,
+                    )
+                    g5_config.add_options(binary_options)
+                    g5_config.update_options(dict_options)
+                    g5_configs.append(g5_config)
+
+    if num_thread > 1:
+        p = Pool(num_thread)
+        p.map(c.run_wrapper, g5_configs)
+    else:
+        g5_configs[0].check_and_run()
+
+
+if __name__ == '__main__':
+    main()
+
-- 
2.29.2

